function test_multifibre()

import casadi.*;

N_muscles = model_info.muscle_info.NMuscle;
N_fibre = S.multifibre.NFibre;

% Function for Hill-equilibrium
FTtilde     = SX.sym('FTtilde', N_muscles); % Normalized tendon forces
a           = SX.sym('a', N_muscles, N_fibre); % Muscle activations
dFTtilde    = SX.sym('dFTtilde', N_muscles); % Time derivative tendon forces
lMT         = SX.sym('lMT', N_muscles); % Muscle-tendon lengths
vMT         = SX.sym('vMT', N_muscles); % Muscle-tendon velocities
tension_SX  = SX.sym('tension', N_muscles); % Tensions
% atendon_SX  = SX.sym('atendon',NMuscle); % Tendon stiffness
% shift_SX    = SX.sym('shift',NMuscle); % shift curve
Hilldiff    = SX(N_muscles, 1); % Hill-equilibrium
FT          = SX(N_muscles, 1); % Tendon forces
Fce         = SX(N_muscles, 1); % Contractile element forces
Fiso        = SX(N_muscles, 1); % Normalized forces from force-length curve
vMmax       = SX(N_muscles, N_fibre); % Maximum contraction velocities
massM       = SX(N_muscles, 1); % Muscle mass
Fpass       = SX(N_muscles, 1); % Passive element forces
load('Fvparam.mat', 'Fvparam');
load('Fpparam.mat', 'Fpparam');
load('Faparam.mat', 'Faparam');

% Parameters of force-length-velocity curves
if S.multifibre.use_multifibre_muscles
    for m = 1:N_muscles
        [Hilldiff(m), FT(m), Fce(m), Fpass(m), Fiso(m), vMmax(m,:), massM(m)] = ...
            ForceEquilibrium_FtildeState_all_tendon_multifibre(a(m, :), FTtilde(m), ...
            dFTtilde(m), lMT(m), vMT(m), model_info.muscle_info.parameters(m).FMo, ...
            model_info.muscle_info.parameters(m).lMo, model_info.muscle_info.parameters(m).lTs, ...
            model_info.muscle_info.parameters(m).alphao, model_info.muscle_info.parameters(m).vMmax, ...
            Fvparam, Fpparam, Faparam, tension_SX(m), model_info.muscle_info.parameters(m).tendon_stiff, ...
            model_info.muscle_info.parameters(m).tendon_stiff_shift, S.misc.constant_pennation_angle, ...
            S.misc.dampingCoefficient, model_info.muscle_info.parameters(m).muscle_pass_stiff_shift, ...
            model_info.muscle_info.parameters(m).muscle_pass_stiff_scale, ...
            model_info.muscle_info.parameters(m).muscle_strength, ...
            model_info.muscle_info.parameters(m).per_fibre, ...
            N_fibre);
    end
else
    for m = 1:N_muscles
        [Hilldiff(m), FT(m), Fce(m), Fpass(m), Fiso(m), vMmax(m), massM(m)] = ...
            ForceEquilibrium_FtildeState_all_tendon_multifibre(a(m, :), FTtilde(m), ...
            dFTtilde(m), lMT(m), vMT(m), model_info.muscle_info.parameters(m).FMo, ...
            model_info.muscle_info.parameters(m).lMo, model_info.muscle_info.parameters(m).lTs, ...
            model_info.muscle_info.parameters(m).alphao, model_info.muscle_info.parameters(m, :).vMmax, ...
            Fvparam, Fpparam, Faparam, tension_SX(m), model_info.muscle_info.parameters(m).tendon_stiff, ...
            model_info.muscle_info.parameters(m).tendon_stiff_shift, S.misc.constant_pennation_angle, ...
            S.misc.dampingCoefficient, model_info.muscle_info.parameters(m).muscle_pass_stiff_shift, ...
            model_info.muscle_info.parameters(m).muscle_pass_stiff_scale, ...
            model_info.muscle_info.parameters(m).muscle_strength);
    end
end
f_forceEquilibrium_FtildeState_all_tendon = ...
    Function('f_forceEquilibrium_FtildeState_all_tendon',{a,FTtilde,...
    dFTtilde,lMT,vMT,tension_SX},{Hilldiff,FT,Fce,Fpass,Fiso,vMmax,massM},...
    {'a','FTtilde','dFTtilde','lMT','vMT','tension_SX'},...
    {'Hilldiff','FT','Fce','Fpass','Fiso','vMmax','massM'});

a = ones(N_muscles,N_fibre);
FTtilde = ones(N_muscles,1);
dFTtilde = zeros(N_muscles,1);
lMT = [];
for i = 1:N_muscles
    lMT(i,1) = ...
        (model_info.muscle_info.parameters(i).lMo .* ...
        model_info.muscle_info.parameters(i).alphao + ...
        model_info.muscle_info.parameters(i).lTs);
end
vMT = zeros(N_muscles,1);
tension = ones(N_muscles, 1);

% Evaluate
[res, FT, Fce, FPass, Fiso, vMmax, massM] = ...
    f_forceEquilibrium_FtildeState_all_tendon(a, FTtilde, dFTtilde, lMT, vMT, tension);

end